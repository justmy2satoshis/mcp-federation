name: MCP Federation CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # Daily validation

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate-installer:
    name: Validate MCP Installer
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['18.x', '20.x', '22.x']
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ~/.cache/pip
            ~/AppData/npm-cache
            ~/Library/Caches/pip
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json', '**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-deps-
      
      - name: Run CI Test Wrapper
        run: |
          echo "Running CI test wrapper (NOT the installer directly)"
          python tests/test_installer_ci.py
        shell: bash
        timeout-minutes: 2
        
      - name: Check for test contamination
        run: |
          echo "Checking installer for forbidden test code..."
          if grep -q "quick_test\|test_mode\|dry_run\|mock\|CI\|debug" install.py; then
            echo "ERROR: Test code found in production installer!"
            exit 1
          fi
          echo "✓ Installer is clean - no test contamination"
        shell: bash
      
      - name: Validate installer syntax
        run: |
          python -m py_compile install.py
          echo "✓ Installer syntax valid"
        shell: bash
      
      - name: Generate test report
        if: always()
        run: |
          echo "## Test Results for ${{ matrix.os }} - Node ${{ matrix.node-version }} - Python ${{ matrix.python-version }}" > test-report.md
          echo "- Test wrapper: completed" >> test-report.md
          echo "- No test contamination: verified" >> test-report.md
          echo "- Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> test-report.md
        shell: bash
      
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-node${{ matrix.node-version }}-py${{ matrix.python-version }}
          path: test-report.md
          retention-days: 7

  security-scan:
    name: Security & Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check for secrets in code
        run: |
          # Check for potential API keys or tokens
          if grep -r "sk-\|api_key\|token" --include="*.py" .; then
            echo "WARNING: Potential secrets found in code"
          fi
      
      - name: Python safety check
        run: |
          pip install safety
          safety check || true

  publish-results:
    name: Publish CI Results
    needs: [validate-installer]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "# CI/CD Pipeline Results" > SUMMARY.md
          echo "## Status" >> SUMMARY.md
          echo "- Production installer validated" >> SUMMARY.md
          echo "- No test contamination found" >> SUMMARY.md
          echo "- Complete separation maintained" >> SUMMARY.md
      
      - name: Upload summary
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-summary
          path: SUMMARY.md
          retention-days: 7