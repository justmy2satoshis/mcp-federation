name: MCP Federation CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # Daily validation

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate-installer:
    name: Validate MCP Installer
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['18.x', '20.x', '22.x']
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ~/.cache/pip
            ~/AppData/npm-cache
            ~/Library/Caches/pip
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json', '**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-deps-
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-timeout pytest-xdist
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        shell: bash
        continue-on-error: false
        timeout-minutes: 5
      
      - name: Install Node.js tools
        run: |
          npm install -g npm@latest
          npm install -g npx
        shell: bash
        timeout-minutes: 5
        
      - name: Run installer validation
        id: validate
        run: |
          if [ -f install.py ]; then
            python install.py --dry-run --validate
          else
            echo "Installer not yet created"
          fi
        shell: bash
        timeout-minutes: 10
        continue-on-error: false
      
      - name: Validate MCP count
        if: steps.validate.outcome == 'success'
        run: |
          if [ -f ~/.claude/claude_desktop_config.json ]; then
            MCP_COUNT=$(python -c "import json; config=json.load(open('$HOME/.claude/claude_desktop_config.json')); print(len(config.get('mcpServers', {})))")
            if [ "$MCP_COUNT" -ne 15 ]; then
              echo "ERROR: Expected 15 MCPs, found $MCP_COUNT"
              exit 1
            fi
            echo "✅ All 15 MCPs configured correctly"
          fi
        shell: bash
      
      - name: Test MCP health checks
        if: steps.validate.outcome == 'success'
        run: |
          if [ -f tests/test_mcp_health.py ]; then
            python -m pytest tests/test_mcp_health.py -v --tb=short
          fi
        shell: bash
        timeout-minutes: 15
        continue-on-error: false
      
      - name: Generate test report
        if: always()
        run: |
          echo "## Test Results for ${{ matrix.os }} - Node ${{ matrix.node-version }} - Python ${{ matrix.python-version }}" > test-report.md
          echo "- Installer validation: ${{ steps.validate.outcome }}" >> test-report.md
          echo "- Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> test-report.md
        shell: bash
      
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-node${{ matrix.node-version }}-py${{ matrix.python-version }}
          path: |
            test-report.md
            ~/.claude/claude_desktop_config.json
          retention-days: 30
      
      - name: Retry failed operations
        if: failure()
        run: |
          echo "Retrying installation (attempt 2/3)..."
          if [ -f install.py ]; then
            python install.py --retry --max-attempts=3
          fi
        shell: bash
        timeout-minutes: 10

  security-scan:
    name: Security & Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run npm audit
        run: |
          if [ -f package.json ]; then
            npm audit --audit-level=high || true
          fi
        shell: bash
      
      - name: Run pip-audit
        run: |
          pip install pip-audit
          if [ -f requirements.txt ]; then
            pip-audit -r requirements.txt || true
          fi
        shell: bash
      
      - name: License compliance check
        run: |
          pip install pip-licenses
          pip-licenses --format=markdown > licenses.md || true
        shell: bash

  performance-benchmark:
    name: Performance Benchmarking
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run performance tests
        run: |
          echo "Starting performance benchmark..."
          start_time=$(date +%s)
          if [ -f install.py ]; then
            python install.py --benchmark
          fi
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "Installation completed in ${duration} seconds"
          if [ $duration -gt 600 ]; then
            echo "WARNING: Installation took longer than 10 minutes"
            exit 1
          fi
        shell: bash
        timeout-minutes: 15

  publish-results:
    name: Publish CI Results
    needs: [validate-installer, security-scan, performance-benchmark]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      
      - name: Generate summary report
        run: |
          echo "# CI/CD Pipeline Results" > SUMMARY.md
          echo "## Matrix Test Results" >> SUMMARY.md
          echo "- Total configurations tested: 27 (3 OS × 3 Node × 3 Python)" >> SUMMARY.md
          echo "- Success rate: calculating..." >> SUMMARY.md
          echo "## Next Steps" >> SUMMARY.md
          echo "- Review any failed tests" >> SUMMARY.md
          echo "- Address security vulnerabilities" >> SUMMARY.md
          echo "- Optimize performance bottlenecks" >> SUMMARY.md
      
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('SUMMARY.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });