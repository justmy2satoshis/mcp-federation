name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  validate-commits:
    name: Validate Conventional Commits
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check commit messages
        uses: wagoid/commitlint-github-action@v5
        with:
          configFile: .commitlintrc.json
          failOnWarnings: true
      
      - name: Validate PR title
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          if ! echo "$PR_TITLE" | grep -E "^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .+"; then
            echo "ERROR: PR title must follow conventional commit format"
            echo "Example: 'feat: Add new MCP installer' or 'fix(memory): Resolve EEXIST error'"
            exit 1
          fi

  fast-tests:
    name: Fast PR Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black pylint mypy
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Lint Python code
        run: |
          if [ -f install.py ]; then
            flake8 install.py --max-line-length=120 --ignore=E203,W503
            black --check install.py
            pylint install.py --fail-under=8.0 || true
            mypy install.py --ignore-missing-imports || true
          fi
      
      - name: Check for secrets
        run: |
          pip install detect-secrets
          detect-secrets scan --baseline .secrets.baseline || true
          if grep -r "sk-" . --include="*.py" --include="*.js" --include="*.yml"; then
            echo "ERROR: Potential API key found in code!"
            exit 1
          fi
      
      - name: Validate file structure
        run: |
          required_files=("README.md" ".gitignore" "LICENSE")
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "WARNING: Missing required file: $file"
            fi
          done
      
      - name: Quick installation test
        run: |
          if [ -f install.py ]; then
            python install.py --dry-run --quick-test
            echo "✅ Quick validation passed"
          fi
        timeout-minutes: 5

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true
      
      - name: CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        continue-on-error: true

  pr-comment:
    name: PR Status Comment
    needs: [validate-commits, fast-tests, code-quality]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const commitValidation = '${{ needs.validate-commits.result }}';
            const fastTests = '${{ needs.fast-tests.result }}';
            const codeQuality = '${{ needs.code-quality.result }}';
            
            let comment = '## 🤖 PR Validation Results\n\n';
            comment += '| Check | Status |\n';
            comment += '|-------|--------|\n';
            comment += `| Conventional Commits | ${commitValidation === 'success' ? '✅' : '❌'} |\n`;
            comment += `| Fast Tests | ${fastTests === 'success' ? '✅' : '❌'} |\n`;
            comment += `| Code Quality | ${codeQuality === 'success' ? '✅' : '⚠️'} |\n`;
            comment += '\n';
            
            if (commitValidation === 'success' && fastTests === 'success') {
              comment += '### ✅ This PR is ready for review!\n';
              comment += '- All validation checks passed\n';
              comment += '- Please wait for full CI/CD pipeline results\n';
            } else {
              comment += '### ❌ This PR needs attention\n';
              comment += '- Please fix the failing checks above\n';
              comment += '- Push new commits to trigger re-validation\n';
            }
            
            comment += '\n---\n';
            comment += '_Last updated: ' + new Date().toISOString() + '_';
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('PR Validation Results')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

  block-merge:
    name: Block Merge on Failure
    needs: [validate-commits, fast-tests]
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Set commit status
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: 'failure',
              description: 'PR validation failed - merge blocked',
              context: 'pr-validation'
            });